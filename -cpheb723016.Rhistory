# Make table summarizing the composition of the Origin
origin_summary <- syn_iavdata %>%
group_by(origin) %>%
summarise(
Count = n(),  # Total observations per origin
Percentage = round((Count / nrow(iavdata2)) * 100, 2)  # Calculate percentage
) %>%
arrange(desc(Count))  # Sort by highest count
# Display the table
origin_summary %>%
gt() %>%
tab_header(
title = "Composition of Origin"
) %>%
cols_label(
origin = "Origin",
Count = "Count",
Percentage = "Percentage (%)"
)
# Box plot of lethal vs. wt_loss_day
plot1 <- ggplot(iavdata2, aes(x = as.factor(lethal), y = wt_loss_day)) +
geom_boxplot(fill = "skyblue", color = "black", outlier.color = "red", outlier.size = 2) +
labs(
title = "Lethal vs. Day of Weight Loss (original data)",
x = "Lethal (0 = False, 1 = True)",
y = "Weight Loss Day (wt_loss_day)"
) +
theme_minimal()
plot2 <- ggplot(syn_iavdata, aes(x = as.factor(lethal), y = wt_loss_day)) +
geom_boxplot(fill = "skyblue", color = "black", outlier.color = "red", outlier.size = 2) +
labs(
title = "Lethal vs. Day of Weight Loss (Sythetic Data) ",
x = "Lethal (0 = False, 1 = True)",
y = "Weight Loss Day (wt_loss_day)"
) +
theme_minimal()
lethal_day <- grid.arrange(plot1, plot2, ncol = 2) # to put those plots side by side
figure_file = here("cdcdata-exercise","pictures","lethal_day.png")
ggsave(filename = figure_file, plot=lethal_day)
# Box plot of lethal vs. temp
plot3 <- ggplot(iavdata2, aes(x = as.factor(lethal), y = temp)) +
geom_boxplot(fill = "skyblue", color = "black", outlier.color = "red", outlier.size = 2) +
labs(
title = "Lethal vs. Temperature  (Original Data)",
x = "Lethal (0 = False, 1 = True)",
y = "Temperature (temp)"
) +
theme_minimal()
plot4 <- ggplot(syn_iavdata, aes(x = as.factor(lethal), y = temp)) +
geom_boxplot(fill = "skyblue", color = "black", outlier.color = "red", outlier.size = 2) +
labs(
title = "Lethal vs. Temperature (sythetic Data)",
x = "Lethal (0 = False, 1 = True)",
y = "Temperature (temp)"
) +
theme_minimal()
lethal_temp <- grid.arrange(plot3, plot4, ncol = 2)
figure_file = here("cdcdata-exercise","pictures","lethal_temp.png")
ggsave(filename = figure_file, plot=lethal_temp)
his_wtloss_ori <- ggplot(iavdata2, aes(x = wt_loss)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "green", color = "black", alpha = 0.7) +  # Density-based histogram
geom_density(color = "blue", size = 1) +  # Overlay density curve
labs(title = "Distribution of wt_loss (original)", x = "wt_loss", y = "Density") +
theme_minimal()
his_wtloss_syn <- ggplot(syn_iavdata, aes(x = wt_loss)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "pink", color = "black", alpha = 0.7) +  # Density-based histogram
geom_density(color = "blue", size = 1) +  # Overlay density curve
labs(title = "Distribution of wt_loss (synthetic)", x = "wt_loss", y = "Density") +
theme_minimal()
his_wtloss <- grid.arrange(his_wtloss_ori, his_wtloss_syn, ncol = 2)
figure_file = here("cdcdata-exercise","pictures","his_wtlossp.png")
ggsave(filename = figure_file, plot=his_wtloss)
his_day_ori <- ggplot(iavdata2, aes(x = wt_loss)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "purple", color = "black", alpha = 0.7) +  # Density-based histogram
geom_density(color = "blue", size = 1) +  # Overlay density curve
labs(title = "Distribution of Day Weight loss (original)", x = "wt_day_loss", y = "Density") +
theme_minimal()
his_day_syn <- ggplot(syn_iavdata, aes(x = wt_loss)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "lightblue", color = "black", alpha = 0.7) +  # Density-based histogram
geom_density(color = "blue", size = 1) +  # Overlay density curve
labs(title = "Distribution of Day Weight loss  (synthetic)", x = "wt_day_loss", y = "Density") +
theme_minimal()
his_wt_day_loss <- grid.arrange(his_day_ori, his_day_syn, ncol = 2)
figure_file = here("cdcdata-exercise","pictures","his_wt_day_loss.png")
ggsave(filename = figure_file, plot=his_wt_day_loss)
his_temp_ori <- ggplot(iavdata2, aes(x = wt_loss)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "red", color = "black", alpha = 0.7) +  # Density-based histogram
geom_density(color = "blue", size = 1) +  # Overlay density curve
labs(title = "Distribution of temperature (original)", x = "temperature", y = "Density") +
theme_minimal()
his_temp_syn <- ggplot(syn_iavdata, aes(x = wt_loss)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "yellow", color = "black", alpha = 0.7) +  # Density-based histogram
geom_density(color = "blue", size = 1) +  # Overlay density curve
labs(title = "Distribution of temperature (synthetic)", x = "temperature", y = "Density") +
theme_minimal()
his_temp <- grid.arrange(his_temp_ori, his_temp_syn, ncol = 2)
figure_file = here("cdcdata-exercise","pictures","his_temp .png")
ggsave(filename = figure_file, plot=his_temp )
chooseCRANmirror()  # Manually select a CRAN mirror
options(repos = c(CRAN = "https://cloud.r-project.org/"))
install.packages("gridExtra")
rm(list = ls())
gc()
# Load package
library(here)
library(dplyr)
library(gt)
library(ggplot2)
install.packages("gridExtra")
library(gridExtra)
install.packages("ggpubr")
library(ggpubr)
# Load data
iavdata <- read.csv(here("cdcdata-exercise", "influenza_data.csv"))
# Get an overview of the data
str(iavdata)       # Structure of the dataset
summary(iavdata)   # Summary statistics
dim(iavdata)       # Dimensions (rows and columns)
# Check missing values
colSums(is.na(iavdata))
# Pick a few vairables
iavdata2 <- iavdata %>% select(lethal, Origin, wt_loss, wt_loss_day, temp)
# View the structure of the new data frame
str(iavdata2)
# Display the first few rows
head(iavdata2)
install.packages("ggpubr")
# Make table summarizing the Origin lethal rate
# Encode lethal to be logical
iavdata2 <- iavdata2 %>%
mutate(lethal = as.logical(lethal))
library(dplyr)
library(ggplot2)
library(gridExtra)
library(ggpubr)
# Make table summarizing the Origin lethal rate
# Encode lethal to be logical
iavdata2 <- iavdata2 %>%
mutate(lethal = as.logical(lethal))
# Create a summary table with lethal rate (where lethal is TRUE)
exploratory_table <- iavdata2 %>%
group_by(Origin) %>%
summarise(
Total = n(),
Lethal_True = sum(lethal, na.rm = TRUE),  # Ensure TRUE values are counted
Lethal_Rate = round((Lethal_True / Total) * 100, 2)  # Calculate percentage
) %>%
arrange(desc(Lethal_Rate))  # Sort by Lethal Rate
# Display the table
exploratory_table %>%
gt() %>%
tab_header(
title = "Lethal (TRUE) Rate by Origin"
) %>%
cols_label(
Origin = "Origin",
Total = "Total Cases",
Lethal_True = "Lethal (TRUE) Count",
Lethal_Rate = "Lethal Rate (%)"
)
install.packages("gt")
install.packages("gt")
library(gt)
library(gt)
# Load package
library(here)
library(dplyr)
library(gt)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(ggpubr)
# Make table summarizing the Origin lethal rate
# Encode lethal to be logical
iavdata2 <- iavdata2 %>%
mutate(lethal = as.logical(lethal))
# Create a summary table with lethal rate (where lethal is TRUE)
exploratory_table <- iavdata2 %>%
group_by(Origin) %>%
summarise(
Total = n(),
Lethal_True = sum(lethal, na.rm = TRUE),  # Ensure TRUE values are counted
Lethal_Rate = round((Lethal_True / Total) * 100, 2)  # Calculate percentage
) %>%
arrange(desc(Lethal_Rate))  # Sort by Lethal Rate
# Display the table
exploratory_table %>%
gt() %>%
tab_header(
title = "Lethal (TRUE) Rate by Origin"
) %>%
cols_label(
Origin = "Origin",
Total = "Total Cases",
Lethal_True = "Lethal (TRUE) Count",
Lethal_Rate = "Lethal Rate (%)"
)
library(gt)
install.packages("rlang")
install.packages("rlang")
library(gt)
install.packages("rlang", dependencies = TRUE)
install.packages("rlang", dependencies = TRUE)
install.packages("gt", dependencies = TRUE)
install.packages("gt", dependencies = TRUE)
library(gt)
install.packages("rlang", dependencies = TRUE)
install.packages("rlang", dependencies = TRUE)
install.packages("gt", dependencies = TRUE)
install.packages("gt", dependencies = TRUE)
library(gt)
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(gt)
packageVersion("rlang")
remove.packages("rlang")
install.packages("rlang", dependencies = TRUE)
install.packages("rlang", dependencies = TRUE)
library(gt)
packageVersion("rlang")
install.packages("rlang", dependencies = TRUE)
packageVersion("rlang")
library(gt)
install.packages("htmltools")
install.packages("htmltools")
packageVersion("htmltools")
library(gt)
# Make table summarizing the Origin lethal rate
# Encode lethal to be logical
iavdata2 <- iavdata2 %>%
mutate(lethal = as.logical(lethal))
# Load package
library(here)
library(dplyr)
library(gt)
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(tidyverse)
# Make table summarizing the Origin lethal rate
# Encode lethal to be logical
iavdata2 <- iavdata2 %>%
mutate(lethal = as.logical(lethal))
# Create a summary table with lethal rate (where lethal is TRUE)
exploratory_table <- iavdata2 %>%
group_by(Origin) %>%
summarise(
Total = n(),
Lethal_True = sum(lethal, na.rm = TRUE),  # Ensure TRUE values are counted
Lethal_Rate = round((Lethal_True / Total) * 100, 2)  # Calculate percentage
) %>%
arrange(desc(Lethal_Rate))  # Sort by Lethal Rate
# Display the table
exploratory_table %>%
gt() %>%
tab_header(
title = "Lethal (TRUE) Rate by Origin"
) %>%
cols_label(
Origin = "Origin",
Total = "Total Cases",
Lethal_True = "Lethal (TRUE) Count",
Lethal_Rate = "Lethal Rate (%)"
)
# Make table summarizing the composition of the Origin
origin_summary <- iavdata2 %>%
group_by(Origin) %>%
summarise(
Count = n(),  # Total observations per origin
Percentage = round((Count / nrow(iavdata2)) * 100, 2)  # Calculate percentage
) %>%
arrange(desc(Count))  # Sort by highest count
# Display the table
origin_summary %>%
gt() %>%
tab_header(
title = "Composition of Origin"
) %>%
cols_label(
Origin = "Origin",
Count = "Count",
Percentage = "Percentage (%)"
)
# Plot the distribution and summarize mean and standard deviation of wt_loss, wt_loss_day, and temp
# Define a function to plot and summarize a variable
plot_and_summarize <- function(data, variable) {
# Create histogram with density curve
p <- ggplot(data, aes(x = !!sym(variable))) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "pink", color = "black") +
geom_density(color = "skyblue", size = 1) +
labs(title = paste("Distribution of", variable), x = variable, y = "Density") +
theme_minimal()
# Print the plot
print(p)
# Calculate mean and standard deviation
summary_stats <- data %>%
summarise(
Mean = mean(!!sym(variable), na.rm = TRUE),
SD = sd(!!sym(variable), na.rm = TRUE)
)
return(summary_stats)
}
# Plot and summarize wt_loss
wt_loss_summary <- plot_and_summarize(iavdata2, "wt_loss")
print(wt_loss_summary)
# Plot and summarize wt_loss_day
wt_loss_day_summary <- plot_and_summarize(iavdata2, "wt_loss_day")
print(wt_loss_day_summary)
# Plot and summarize temp
temp_summary <- plot_and_summarize(iavdata2, "temp")
print(temp_summary)
# Box plot of lethal vs. wt_loss
ggplot(iavdata2, aes(x = as.factor(lethal), y = wt_loss)) +
geom_boxplot(fill = "skyblue", color = "black", outlier.color = "red", outlier.size = 2) +
labs(
title = "Box Plot of Lethal vs. Maximum Percentage Weight Loss",
x = "Lethal (0 = False, 1 = True)",
y = "Weight Loss (wt_loss)"
) +
theme_minimal()
# Box plot of lethal vs. wt_loss_day
ggplot(iavdata2, aes(x = as.factor(lethal), y = wt_loss_day)) +
geom_boxplot(fill = "skyblue", color = "black", outlier.color = "red", outlier.size = 2) +
labs(
title = "Box Plot of Lethal vs. Day of Maximum Percentage Weight Loss",
x = "Lethal (0 = False, 1 = True)",
y = "Weight Loss Day (wt_loss_day)"
) +
theme_minimal()
# Box plot of lethal vs. temp
ggplot(iavdata2, aes(x = as.factor(lethal), y = temp)) +
geom_boxplot(fill = "skyblue", color = "black", outlier.color = "red", outlier.size = 2) +
labs(
title = "Box Plot of Lethal vs. Maximum Increase in Degrees Celsius",
x = "Lethal (0 = False, 1 = True)",
y = "Temperature (temp)"
) +
theme_minimal()
summary(iavdata2)
origin_summary %>%
gt() %>%
tab_header(
title = "Composition of Origin"
) %>%
cols_label(
Origin = "Origin",
Count = "Count",
Percentage = "Percentage (%)"
)
table(iavdata2$lethal, iavdata2$Origin)
numeric_cols <- sapply(iavdata2, is.numeric) # select numeric column only
std_dev <- apply(iavdata2[, numeric_cols], 2, sd)
print(std_dev)
# Set the number of observations for the synthetic dataset
n <- 728
# 1. Generate the 'lethal' variable (Logical: 620 Falses and 108 Trues)
lethal <- sample(c(FALSE, TRUE), size = n, replace = TRUE, prob = c(620/728, 108/728))
# 2. Generate the 'origin' variable (Character with given proportions)
origin <- sample(c("Avian", "Human", "Variant", "Swine", "Canine"),
size = n, replace = TRUE,
prob = c(384/728, 180/728, 146/728, 15/728, 3/728))
# 3. Generate the 'wt_loss' variable (Continuous variable with mean 9.914 and sd 6.668)
wt_loss <- rnorm(n, mean = 9.914, sd = 6.668)
# 4. Generate the 'wt_loss_day' variable (Continuous variable with mean 6.431 and sd 3.194)
wt_loss_day <- rnorm(n, mean = 6.431, sd = 3.194)
# 5. Generate the 'temp' variable (Continuous variable with mean 1.586 and sd 0.776)
temp <- rnorm(n, mean = 1.586, sd = 0.776)
# Combine all variables into a data frame
syn_iavdata <- data.frame(
lethal = lethal,
origin = origin,
wt_loss = wt_loss,
wt_loss_day = wt_loss_day,
temp = temp
)
head(syn_iavdata)
dim(syn_iavdata)
# Display a summary of the synthetic dataset
summary(syn_iavdata)
# Make table summarizing the Origin lethal rate
# Encode lethal to be logical
syn_iavdata <- syn_iavdata %>%
mutate(lethal = as.logical(lethal))
# Create a summary table with lethal rate (where lethal is TRUE)
exploratory_table <- syn_iavdata %>%
group_by(origin) %>%
summarise(
Total = n(),
Lethal_True = sum(lethal, na.rm = TRUE),  # Ensure TRUE values are counted
Lethal_Rate = round((Lethal_True / Total) * 100, 2)  # Calculate percentage
) %>%
arrange(desc(Lethal_Rate))  # Sort by Lethal Rate
# Display the table# syn_iavdataDisplay the table
exploratory_table %>%
gt() %>%
tab_header(
title = "Lethal (TRUE) Rate by Origin"
) %>%
cols_label(
origin = "Origin",
Total = "Total Cases",
Lethal_True = "Lethal (TRUE) Count",
Lethal_Rate = "Lethal Rate (%)"
)
# Make table summarizing the composition of the Origin
origin_summary <- syn_iavdata %>%
group_by(origin) %>%
summarise(
Count = n(),  # Total observations per origin
Percentage = round((Count / nrow(iavdata2)) * 100, 2)  # Calculate percentage
) %>%
arrange(desc(Count))  # Sort by highest count
# Display the table
origin_summary %>%
gt() %>%
tab_header(
title = "Composition of Origin"
) %>%
cols_label(
origin = "Origin",
Count = "Count",
Percentage = "Percentage (%)"
)
# Box plot of lethal vs. wt_loss_day
plot1 <- ggplot(iavdata2, aes(x = as.factor(lethal), y = wt_loss_day)) +
geom_boxplot(fill = "skyblue", color = "black", outlier.color = "red", outlier.size = 2) +
labs(
title = "Lethal vs. Day of Weight Loss (original data)",
x = "Lethal (0 = False, 1 = True)",
y = "Weight Loss Day (wt_loss_day)"
) +
theme_minimal()
plot2 <- ggplot(syn_iavdata, aes(x = as.factor(lethal), y = wt_loss_day)) +
geom_boxplot(fill = "skyblue", color = "black", outlier.color = "red", outlier.size = 2) +
labs(
title = "Lethal vs. Day of Weight Loss (Sythetic Data) ",
x = "Lethal (0 = False, 1 = True)",
y = "Weight Loss Day (wt_loss_day)"
) +
theme_minimal()
lethal_day <- grid.arrange(plot1, plot2, ncol = 2) # to put those plots side by side
figure_file = here("cdcdata-exercise","pictures","lethal_day.png")
ggsave(filename = figure_file, plot=lethal_day)
# Box plot of lethal vs. temp
plot3 <- ggplot(iavdata2, aes(x = as.factor(lethal), y = temp)) +
geom_boxplot(fill = "skyblue", color = "black", outlier.color = "red", outlier.size = 2) +
labs(
title = "Lethal vs. Temperature  (Original Data)",
x = "Lethal (0 = False, 1 = True)",
y = "Temperature (temp)"
) +
theme_minimal()
plot4 <- ggplot(syn_iavdata, aes(x = as.factor(lethal), y = temp)) +
geom_boxplot(fill = "skyblue", color = "black", outlier.color = "red", outlier.size = 2) +
labs(
title = "Lethal vs. Temperature (sythetic Data)",
x = "Lethal (0 = False, 1 = True)",
y = "Temperature (temp)"
) +
theme_minimal()
lethal_temp <- grid.arrange(plot3, plot4, ncol = 2)
figure_file = here("cdcdata-exercise","pictures","lethal_temp.png")
ggsave(filename = figure_file, plot=lethal_temp)
his_wtloss_ori <- ggplot(iavdata2, aes(x = wt_loss)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "green", color = "black", alpha = 0.7) +  # Density-based histogram
geom_density(color = "blue", size = 1) +  # Overlay density curve
labs(title = "Distribution of wt_loss (original)", x = "wt_loss", y = "Density") +
theme_minimal()
his_wtloss_syn <- ggplot(syn_iavdata, aes(x = wt_loss)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "pink", color = "black", alpha = 0.7) +  # Density-based histogram
geom_density(color = "blue", size = 1) +  # Overlay density curve
labs(title = "Distribution of wt_loss (synthetic)", x = "wt_loss", y = "Density") +
theme_minimal()
his_wtloss <- grid.arrange(his_wtloss_ori, his_wtloss_syn, ncol = 2)
figure_file = here("cdcdata-exercise","pictures","his_wtlossp.png")
ggsave(filename = figure_file, plot=his_wtloss)
his_day_ori <- ggplot(iavdata2, aes(x = wt_loss)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "purple", color = "black", alpha = 0.7) +  # Density-based histogram
geom_density(color = "blue", size = 1) +  # Overlay density curve
labs(title = "Distribution of Day Weight loss (original)", x = "wt_day_loss", y = "Density") +
theme_minimal()
his_day_syn <- ggplot(syn_iavdata, aes(x = wt_loss)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "lightblue", color = "black", alpha = 0.7) +  # Density-based histogram
geom_density(color = "blue", size = 1) +  # Overlay density curve
labs(title = "Distribution of Day Weight loss  (synthetic)", x = "wt_day_loss", y = "Density") +
theme_minimal()
his_wt_day_loss <- grid.arrange(his_day_ori, his_day_syn, ncol = 2)
figure_file = here("cdcdata-exercise","pictures","his_wt_day_loss.png")
ggsave(filename = figure_file, plot=his_wt_day_loss)
his_temp_ori <- ggplot(iavdata2, aes(x = wt_loss)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "red", color = "black", alpha = 0.7) +  # Density-based histogram
geom_density(color = "blue", size = 1) +  # Overlay density curve
labs(title = "Distribution of temperature (original)", x = "temperature", y = "Density") +
theme_minimal()
his_temp_syn <- ggplot(syn_iavdata, aes(x = wt_loss)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "yellow", color = "black", alpha = 0.7) +  # Density-based histogram
geom_density(color = "blue", size = 1) +  # Overlay density curve
labs(title = "Distribution of temperature (synthetic)", x = "temperature", y = "Density") +
theme_minimal()
his_temp <- grid.arrange(his_temp_ori, his_temp_syn, ncol = 2)
figure_file = here("cdcdata-exercise","pictures","his_temp .png")
ggsave(filename = figure_file, plot=his_temp )
options(repos = c(CRAN = "https://cloud.r-project.org/"))
install.packages("rlang")
install.packages("rlang")
chooseCRANmirror()
options(repos = c(CRAN = "https://cloud.r-project.org/"))
install.packages("rlang")
install.packages("rlang")
options(repos = c(CRAN = "https://cloud.r-project.org/"))
install.packages("rlang")
